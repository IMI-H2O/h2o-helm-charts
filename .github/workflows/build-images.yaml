# Continuous integration, including test and integration test
name: Build AWS ECR credentials image

# Run in master and dev branches and in all pull requests to those branches
on:
  push:
    branches: main
  schedule:
    # Every Sunday, 05:42 UTC
    - cron: "42 5 * * 0"

jobs:
  amazonEcrCredentials:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: thehyve/aws-ecr-credentials

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Find versions
        id: versions
        run: |
          image_version=$(grep "appVersion:" charts/aws-ecr-credentials/Chart.yaml | cut -d ' ' -f 2)
          echo "Image version: $image_version"
          echo "::set-output name=image-version::$image_version"
          aws_version=$(docker run --rm amazon/aws-cli --version | cut -d ' ' -f 1 | cut -d '/' -f 2)
          echo "AWS version: $aws_version"
          echo "::set-output name=aws-version::$aws_version"
          kube_version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          echo "Kubernetes version: $kube_version"
          echo "::set-output name=kubectl-version::$kube_version"

      # Add Docker labels and tags
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          flavor: latest=true
          tags: |
            type=raw,${{ steps.versions.outputs.image-version }}-aws-${{ steps.versions.outputs.aws-version }}-k8s-${{ steps.versions.outputs.kubectl-version }}
            type=raw,${{ steps.versions.outputs.image-version }}-aws-${{ steps.versions.outputs.aws-version }}
            type=raw,${{ steps.versions.outputs.image-version }}-k8s-${{ steps.versions.outputs.kubectl-version }}
            type=raw,${{ steps.versions.outputs.image-version }}-aws-${{ steps.versions.outputs.aws-version }}
            type=raw,aws-${{ steps.versions.outputs.aws-version }}-k8s-${{ steps.versions.outputs.kubectl-version }}
            type=raw,aws-${{ steps.versions.outputs.aws-version }}
            type=raw,k8s-${{ steps.versions.outputs.kubectl-version }}
            type=raw,${{ steps.versions.outputs.image-version }}

      - name: check whether the image is up to date
        id: docker-version
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          TOKEN=$(curl -u ${DOCKERHUB_USERNAME}:${DOCKERHUB_TOKEN} https://ghcr.io/token\?scope\="repository:${{ env.DOCKER_IMAGE }}:pull" | jq -r .token)
          if curl --head --fail -H "Authorization: Bearer $TOKEN" https://ghcr.io/v2/${{ env.DOCKER_IMAGE }}/manifests/${{ steps.docker_meta.outputs.version }}; then
            echo "::set-output name=up-to-date::true"
          else
            echo "::set-output name=up-to-date::false"
          fi

      # Setup docker build environment
      - name: Set up QEMU
        if: steps.docker-version.outputs.up-to-date == 'false'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: steps.docker-version.outputs.up-to-date == 'false'
        uses: docker/setup-buildx-action@v2

      - name: Build docker
        if: steps.docker-version.outputs.up-to-date == 'false'
        uses: docker/build-push-action@v3
        with:
          context: images/aws-ecr-credentials
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            AWS_VERSION=${{ steps.versions.outputs.aws-version }}
            KUBECTL_VERSION=${{ steps.versions.outputs.kubectl-version }}
          # Use runtime labels from docker_meta as well as fixed labels
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            maintainer=Joris Borgdorff <joris@thehyve.nl>
            org.opencontainers.image.description=AWS ECR credentials updater for Kubernetes
            org.opencontainers.image.authors=Joris Borgdorff <joris@thehyve.nl>
            org.opencontainers.image.vendor=The Hyve
            org.opencontainers.image.licenses=Apache-2.0

      - name: Load docker image
        if: steps.docker-version.outputs.up-to-date == 'false'
        run: docker pull ${{ fromJson(steps.docker_meta.outputs.json).tags[0] }}

      - name: Inspect docker image
        if: steps.docker-version.outputs.up-to-date == 'false'
        run: |
          docker pull ${{ fromJson(steps.docker_meta.outputs.json).tags[0] }}
          docker image inspect ${{ fromJson(steps.docker_meta.outputs.json).tags[0] }}
          docker run --rm ${{ fromJson(steps.docker_meta.outputs.json).tags[0] }} aws --version
          docker run --rm ${{ fromJson(steps.docker_meta.outputs.json).tags[0] }} kubectl --version
